{"ast":null,"code":"var _jsxFileName = \"D:\\\\anubhav-meet\\\\client\\\\src\\\\components\\\\VideoCall.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCall = () => {\n  _s();\n  const [peers, setPeers] = useState([]);\n  const userVideo = useRef();\n  const screenVideo = useRef();\n  const peersRef = useRef([]);\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = new WebSocket('ws://localhost:5000');\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      socketRef.current.onmessage = message => {\n        const signal = JSON.parse(message.data);\n        const peer = new Peer({\n          initiator: false,\n          stream,\n          trickle: false\n        });\n        peer.on('signal', data => {\n          socketRef.current.send(JSON.stringify(data));\n        });\n        peer.signal(signal);\n        peersRef.current.push(peer);\n        setPeers([...peersRef.current]);\n      };\n    });\n    return () => {\n      socketRef.current.close();\n      peersRef.current.forEach(peer => peer.destroy());\n    };\n  }, []);\n  const callUser = () => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false\n    });\n    peer.on('signal', data => {\n      socketRef.current.send(JSON.stringify(data));\n    });\n    peer.on('stream', stream => {\n      const video = document.createElement('video');\n      video.srcObject = stream;\n      video.play();\n      document.body.appendChild(video);\n    });\n    peersRef.current.push(peer);\n    setPeers([...peersRef.current]);\n  };\n  const shareScreen = async () => {\n    try {\n      const screenStream = await navigator.mediaDevices.getDisplayMedia({\n        video: true\n      });\n      screenVideo.current.srcObject = screenStream;\n      peersRef.current.forEach(peer => {\n        peer.replaceTrack(peer.streams[0].getVideoTracks()[0], screenStream.getVideoTracks()[0], peer.streams[0]);\n      });\n    } catch (error) {\n      console.error('Error sharing screen:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Video Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: userVideo,\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: screenVideo,\n      autoPlay: true,\n      style: {\n        width: '100%',\n        height: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: callUser,\n      children: \"Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shareScreen,\n      children: \"Share Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCall, \"gQ6LGkkbpBNxmfAMEvCklOl7hCM=\");\n_c = VideoCall;\nexport default VideoCall;\nvar _c;\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Peer","jsxDEV","_jsxDEV","VideoCall","_s","peers","setPeers","userVideo","screenVideo","peersRef","socketRef","current","WebSocket","navigator","mediaDevices","getUserMedia","video","audio","then","stream","srcObject","onmessage","message","signal","JSON","parse","data","peer","initiator","trickle","on","send","stringify","push","close","forEach","destroy","callUser","document","createElement","play","body","appendChild","shareScreen","screenStream","getDisplayMedia","replaceTrack","streams","getVideoTracks","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","muted","style","width","height","onClick","_c","$RefreshReg$"],"sources":["D:/anubhav-meet/client/src/components/VideoCall.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Peer from 'simple-peer';\r\n\r\nconst VideoCall = () => {\r\n  const [peers, setPeers] = useState([]);\r\n  const userVideo = useRef();\r\n  const screenVideo = useRef();\r\n  const peersRef = useRef([]);\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = new WebSocket('ws://localhost:5000');\r\n\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\r\n      userVideo.current.srcObject = stream;\r\n\r\n      socketRef.current.onmessage = (message) => {\r\n        const signal = JSON.parse(message.data);\r\n        const peer = new Peer({ initiator: false, stream, trickle: false });\r\n\r\n        peer.on('signal', (data) => {\r\n          socketRef.current.send(JSON.stringify(data));\r\n        });\r\n\r\n        peer.signal(signal);\r\n        peersRef.current.push(peer);\r\n        setPeers([...peersRef.current]);\r\n      };\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.close();\r\n      peersRef.current.forEach(peer => peer.destroy());\r\n    };\r\n  }, []);\r\n\r\n  const callUser = () => {\r\n    const peer = new Peer({ initiator: true, trickle: false });\r\n\r\n    peer.on('signal', (data) => {\r\n      socketRef.current.send(JSON.stringify(data));\r\n    });\r\n\r\n    peer.on('stream', (stream) => {\r\n      const video = document.createElement('video');\r\n      video.srcObject = stream;\r\n      video.play();\r\n      document.body.appendChild(video);\r\n    });\r\n\r\n    peersRef.current.push(peer);\r\n    setPeers([...peersRef.current]);\r\n  };\r\n\r\n  const shareScreen = async () => {\r\n    try {\r\n      const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });\r\n      screenVideo.current.srcObject = screenStream;\r\n\r\n      peersRef.current.forEach(peer => {\r\n        peer.replaceTrack(\r\n          peer.streams[0].getVideoTracks()[0],\r\n          screenStream.getVideoTracks()[0],\r\n          peer.streams[0]\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.error('Error sharing screen:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Video Call</h2>\r\n      <video ref={userVideo} autoPlay muted />\r\n      <video ref={screenVideo} autoPlay style={{ width: '100%', height: 'auto' }} />\r\n      <button onClick={callUser}>Call</button>\r\n      <button onClick={shareScreen}>Share Screen</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoCall;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}